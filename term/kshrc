#!/usr/bin/env ksh
export HISTFILE="$XDG_DATA_HOME/ksh_history"
export HISTSIZE=65535

set -o vi
PS1="\u:\$(prompt_cwd)\$(prompt_git) $ "

weather() {
  curl -s wttr.in/"$1"?0mq
}

printc() {
  str="$1"
  color="$2"
  case "$color" in
    blue) oid="\033[0;34m";;
    red) oid="\033[0;91m";;
    green) oid="\033[0;32m";;
    yellow) oid="\033[0;33m";;
    *) oid="";;
  esac
  printf "%s%s%s" "$oid" "$str" "\033[0;00m"
}

prompt_cwd() {
  cwd="$(pwd | rev | cut -d'/' -f 1-2 | rev)"
  printc "$cwd" yellow
}

prompt_git() {
	local branch
	if $(git rev-parse --is-inside-work-tree 2>/dev/null); then
		branch="$(git symbolic-ref --quiet --short HEAD 2>/dev/null\
      || git rev-parse --short HEAD 2>/dev/null)";
		printf '@'
    printc $branch red
    if ! $(git rev-parse --is-inside-git-dir); then
      printf "["
			git update-index --really-refresh -q 2>&1 1>/dev/null
			[ "$(git diff --quiet --ignore-submodules; echo $?)" -eq 1 ]\
				&& printc "+" green # Uncommitted changes
			[ "$(git diff-files --quiet --ignore-submodules --; echo $?)" -eq 1 ]\
				&& printc "|" yellow # Unstaged changes
			[ -n "$(git ls-files --other --exclude-standard)" ]\
				&& printc "?" blue # Untracked files
			[ $(git rev-parse --quiet --verify refs/stash; echo $?) -eq 1 ]\
				&& printc "$" red # Stashed files
      printf "]"
		fi
	fi
}

prompt_ssh() {
  local is_client
  if [ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ]; then
    is_client=true
  else
    case "$(ps -o comm= -p $PPID)" in
      sshd|*/sshd) is_client=true;;
    esac
  fi
  $is_client && printc '\h' blue
}

