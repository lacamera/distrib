" Designed for Vim 8+
set nocompatible
if has("eval")
  let skip_defaults_vim = 1
endif

let mapleader=','
set ruler         " See ruf for formatting
set nonumber
set hidden        " Do not complain when switching buffers with changes
set showmode      " Show command and insert mode
set expandtab     " Auto replace tabs with spaces
set tabstop=2
set softtabstop=2
set shiftwidth=2
set history=128   " Command history
set ttyfast       " Faster scrolling
set t_vb=         " Disable the visual bell
set smartindent
set smarttab
set autoindent
set autowrite
"set nobackup
"set noswapfile
"set nowritebackup
set wrapscan
set hlsearch
set incsearch
set linebreak
set cinoptions+=:0
set shortmess=aoOtTI
set updatetime=100
set wildmenu
set ruf=%30(%=%#LineNr#%.50F\ [%{strlen(&ft)?&ft:'none'}]\ %l:%c\ %p%%%)
set omnifunc=syntaxcomplete#Complete

set mouse=a
if has("syntax")
  syntax enable
endif

" Mark trailing spaces as errors
match IncSearch '\s\+$'

if has("autocmd")
  " Start at last place you were editing
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" Fn key bindings
map <F1> :set number!<CR> :set relativenumber!<CR>
map <F2> :set list!<CR>

if v:version >= 800
  set nofixendofline
  set foldmethod=manual
  set nofoldenable

  " Run :PlugInstall to install the plugins
  if filereadable(expand("~/.vim/autoload/plug.vim"))
    call plug#begin("~/.local/share/vim/plugins")
      Plug 'fatih/vim-go', { 'do': ':GoInstallBinaries' }
      Plug 'vim-pandoc/vim-pandoc'
      Plug 'vim-pandoc/vim-pandoc-syntax'
    call plug#end()
    colorscheme Iosvkem
  endif
endif

filetype plugin on
au bufnewfile,bufRead gitconfig set ft=gitconfig
au bufnewfile,bufRead *.tmpl set ft=gohtmltmpl
au bufnewfile,bufRead xdefaults set ft=xdefaults
au bufnewfile,bufRead xresources set ft=xdefaults
au bufnewfile,bufRead xcolors set ft=xdefaults

" TODO: Detect filetype from shebang
if has("eval") && has("autocmd")
  fun! s:DetectBash()
    if getline(1) == '#!/usr/bin/bash' || getline(1) == '#!/bin/bash' || getline(1) == '#!/usr/bin/env bash'
      set ft=bash
    endif
  endfun
  autocmd BufNewFile,BufRead * call s:DetectBash()
endif
