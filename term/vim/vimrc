" Designed for Vim 8+
if has("eval")
  let skip_defaults_vim = 1
endif
let mapleader=','

set cmdheight=2

" Fn key bindings
map <F1> :set number!<CR> :set relativenumber!<CR> :set cursorline!<CR>
map <F2> :set list!<CR>

set nocompatible
if v:version >= 800
  set mouse=a
  filetype plugin on
  colorscheme Iosvkem
  if has("syntax")
    syntax enable
  endif

  set foldmethod=manual
  set nofoldenable
  set nofixendofline

  " Install vim-plug if not found
  if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
      \ 'https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  endif

  " Run PlugInstall if there are missing plugins
  autocmd VimEnter * if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
    \| PlugInstall --sync | source $MYVIMRC
  \| endif

  if filereadable(expand("~/.vim/autoload/plug.vim"))
    call plug#begin(expand("~/.local/share/vim/plugins"))
      Plug 'fatih/vim-go', { 'do': ':GoInstallBinaries' }
      "Plug 'vim-pandoc/vim-pandoc'
    call plug#end()
  endif
endif

" Do not complain when switching
" buffers with changes
set hidden

set nonumber
set showmode
set history=128
set ttyfast
set t_vb=

set expandtab
set tabstop=2
set softtabstop=2
set shiftwidth=2

set smartindent
set smarttab
set autoindent
set autowrite

"set nobackup
"set noswapfile
"set nowritebackup

set wrapscan
set hlsearch
set incsearch
set linebreak
set cinoptions+=:0
set shortmess=aoOtTI
set updatetime=100
set wildmenu
set ruler
set ruf=%30(%=%#LineNr#%.50F\ [%{strlen(&ft)?&ft:'none'}]\ %l:%c\ %p%%%)
set omnifunc=syntaxcomplete#Complete

" Mark trailing spaces as errors
match IncSearch '\s\+$'

if has("eval")

  " Reopen at last known position
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

  au BufNewFile,BufFilePost,BufReadPost,BufWritePost *.tmpl               set ft=gohtmltmpl
  au BufNewFile,BufFilePost,BufReadPost,BufWritePost grub{.conf,cfg}      set ft=grub
  au BufNewFile,BufFilePost,BufReadPost,BufWritePost {.}gitconfig         set ft=gitconfig
  au BufNewFile,BufFilePost,BufReadPost,BufWritePost i3.conf              set ft=i3config
  au BufNewFile,BufFilePost,BufReadPost,BufWritePost xdefaults,xresources,*.xdb set ft=xdefaults

  let s:ftalias = {
    \'node':    'typescript',
    \'python3': 'python',
    \'python2': 'python',
    \}

  fun! s:FtFromBang()
    let pat = '^#!\s*\(\(\S\)*\/\)\?\(env\s\+\)\?\([a-zA-Z0-9-_]*\).*$'
    let cmd = substitute(getline(1), pat, '\4', '')
    if cmd == getline(1)
      return
    endif
    exe 'set ft='.get(s:ftalias, cmd, cmd)
  endfun

  au BufNewFile,BufFilePost,BufReadPost,BufWritePost * call s:FtFromBang()
endif
