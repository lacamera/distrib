" Designed for Vim 8+
if has("eval")
  let skip_defaults_vim = 1
endif
set nocompatible

let mapleader=','
set ruler         " See ruf for formatting
set nonumber      " Disable line numbers
set hidden        " Do not complain when switching buffers with changes
set showmode      " Show command and insert mode
set expandtab     " Auto replace tabs with spaces
set tabstop=2
set softtabstop=2
set shiftwidth=2
set history=128   " Command history
set ttyfast       " Faster scrolling
set t_vb=         " Disable the visual bell
set smartindent
set smarttab
set autoindent
set autowrite
"set nobackup
"set noswapfile
"set nowritebackup
set wrapscan
set hlsearch
set incsearch
set linebreak
set cinoptions+=:0
set shortmess=aoOtTI
set updatetime=100
set wildmenu
set ruf=%30(%=%#LineNr#%.50F\ [%{strlen(&ft)?&ft:'none'}]\ %l:%c\ %p%%%)
set omnifunc=syntaxcomplete#Complete

set mouse=a
colorscheme Iosvkem
if has("syntax")
  syntax enable
endif

" Mark trailing spaces as errors
match IncSearch '\s\+$'

" Fn key bindings
map <F1> :set number!<CR> :set relativenumber!<CR> :set cursorline!<CR>
map <F2> :set list!<CR>

if has("eval")
  " Start at last place you were editing
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

if v:version >= 800
  set foldmethod=manual
  set nofoldenable
  set nofixendofline

  if filereadable(expand("~/.vim/autoload/plug.vim"))
    call plug#begin(expand("~/.local/share/vim/plugins"))
      Plug 'fatih/vim-go', { 'do': ':GoInstallBinaries' }
      Plug 'vim-pandoc/vim-pandoc'
      Plug 'vim-pandoc/vim-pandoc-syntax'
    call plug#end()
  endif
endif

filetype plugin on
au bufnewfile,bufRead *.tmpl     set ft=gohtmltmpl
au bufnewfile,bufRead gitconfig  set ft=gitconfig
au bufnewfile,bufRead xdefaults  set ft=xdefaults
au bufnewfile,bufRead xresources set ft=xdefaults
au bufnewfile,bufRead i3.conf    set ft=i3config

if has("eval")
  let s:aliases = { 'node': 'typescript', 'python3': 'python', 'python2': 'python' }
  fun! s:DetectBang()
    let expr = '^#!\s*\(\(\S\)*\/\)\?\(env\s\+\)\?\([a-zA-Z0-9-_]*\).*$'
    let ft = substitute(getline(1), expr, '\4', "")
    if ft == getline(1)
      return
    endif
    for k in keys(s:aliases)
      if k == ft
        exe 'set ft='.s:aliases[k]
        return
      endif
    endfor
    exe 'set ft='.ft
  endfun
  autocmd BufNewFile,BufRead,BufWritePost * call s:DetectBang()
endif
